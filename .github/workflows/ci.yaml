name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # API Tests with Coverage
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: app
          POSTGRES_DB: ama_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: api/package-lock.json

      - name: Install dependencies
        working-directory: ./api
        run: npm ci

      - name: Run tests with coverage
        working-directory: ./api
        env:
          DATABASE_URL: postgresql://app:app@localhost:5432/ama_test
          ADMIN_KEY: test-admin-key
        run: npm run test:coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: api-coverage
          path: api/coverage/
          retention-days: 30

      - name: Generate coverage summary
        working-directory: ./api
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            echo "## API Test Coverage" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat coverage/coverage-summary.json >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Start services
        run: |
          echo "Starting services..."
          docker compose up -d
          echo "Services started, checking status..."
          docker compose ps
          echo "Checking logs..."
          docker compose logs --tail=20

      - name: Wait for services
        run: |
          echo "Waiting for database to be ready..."
          timeout 60 bash -c 'until docker compose exec -T db pg_isready -U app -d ama; do echo "DB not ready, waiting..."; sleep 3; done'
          echo "Database is ready!"
          
          echo "Checking API container status..."
          docker compose logs api --tail=50
          
          echo "Waiting for API to be ready..."
          timeout 180 bash -c 'until curl -f http://localhost:3000/health; do echo "API not ready, waiting..."; sleep 5; done'
          echo "API is ready!"
          
          echo "Waiting for Web to be ready..."
          timeout 60 bash -c 'until curl -f http://localhost:5173; do echo "Web not ready, waiting..."; sleep 2; done'
          echo "Web is ready!"
          
          echo "All services ready!"

      - name: Install Playwright dependencies
        working-directory: ./web
        run: |
          npm ci
          npx playwright install --with-deps chromium

      - name: Run E2E tests
        working-directory: ./web
        run: npm run test:e2e

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: web/playwright-report/
          retention-days: 30

      - name: Show docker logs on failure
        if: failure()
        run: |
          echo "=== Docker Compose Status ==="
          docker compose ps
          echo "=== API Logs ==="
          docker compose logs api
          echo "=== DB Logs ==="
          docker compose logs db
          echo "=== Redis Logs ==="
          docker compose logs redis
          echo "=== Web Logs ==="
          docker compose logs web

  # Semgrep SAST
  semgrep:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    
    container:
      image: semgrep/semgrep

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        run: semgrep ci --config=p/ci --config=p/typescript --config=p/nodejs --json --output=semgrep-results.json
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload Semgrep results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep-results.json
          retention-days: 30

      - name: Generate Semgrep summary
        if: always()
        run: |
          echo "## Semgrep Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f semgrep-results.json ]; then
            FINDINGS=$(cat semgrep-results.json | grep -o '"errors":\[.*\]' | wc -l)
            echo "**Findings**: $FINDINGS" >> $GITHUB_STEP_SUMMARY
          fi

  # Trivy Filesystem Scan
  trivy-fs:
    name: Trivy Filesystem Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (filesystem)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail the build, just report

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && github.event_name == 'push'
        continue-on-error: true
        with:
          sarif_file: 'trivy-fs-results.sarif'

      - name: Run Trivy vulnerability scanner (filesystem - JSON)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-fs-results.json'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-fs-results
          path: trivy-fs-results.json
          retention-days: 30

  # Build and Scan Docker Images
  build-and-scan:
    name: Build & Scan Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    
    strategy:
      matrix:
        service: [api, web]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner (image)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && github.event_name == 'push'
        continue-on-error: true
        with:
          sarif_file: 'trivy-${{ matrix.service }}-results.sarif'
          category: trivy-${{ matrix.service }}

      - name: Run Trivy vulnerability scanner (image - JSON)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'json'
          output: 'trivy-${{ matrix.service }}-image.json'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy image scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-${{ matrix.service }}-image
          path: trivy-${{ matrix.service }}-image.json
          retention-days: 30

      - name: Push Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Summary Job
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [api-tests, e2e-tests, semgrep, trivy-fs, build-and-scan]
    if: always()
    
    steps:
      - name: Generate CI Summary
        run: |
          echo "# ðŸŽ¯ CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| API Tests | ${{ needs.api-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Semgrep SAST | ${{ needs.semgrep.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Trivy FS Scan | ${{ needs.trivy-fs.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Scan | ${{ needs.build-and-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY

