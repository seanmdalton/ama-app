generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QuestionStatus {
  OPEN
  ANSWERED
}

model Team {
  id          String     @id @default(uuid())
  name        String
  slug        String     @unique
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relationships
  questions   Question[]
  memberships TeamMembership[]
  userPreferences UserPreferences[] // Teams that users have set as default
}

model Question {
  id           String         @id @default(uuid())
  body         String
  upvotes      Int            @default(0) // Legacy field - will be calculated from Upvote records
  status       QuestionStatus @default(OPEN)
  responseText String?
  respondedAt  DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  teamId       String?
  team         Team?          @relation(fields: [teamId], references: [id], onDelete: SetNull)
  authorId     String?        // User who submitted the question
  author       User?          @relation(fields: [authorId], references: [id], onDelete: SetNull)
  tags         QuestionTag[]
  upvoteRecords Upvote[]      // Individual upvote records
}

model Tag {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?
  color       String        @default("#3B82F6") // Default blue color
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  questions   QuestionTag[]
}

model QuestionTag {
  id         String   @id @default(uuid())
  questionId String
  tagId      String
  createdAt  DateTime @default(now())
  
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([questionId, tagId])
}

// User management for SSO integration
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  ssoId     String?  @unique // For SSO provider integration
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  teamMemberships TeamMembership[]
  preferences     UserPreferences?
  questions       Question[]      // Questions submitted by this user
  upvotes         Upvote[]        // Upvotes given by this user
}

// Team membership with roles
model TeamMembership {
  id        String   @id @default(uuid())
  userId    String
  teamId    String
  role      String   @default("member") // member, admin, owner
  createdAt DateTime @default(now())
  
  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
}

// User preferences and settings
model UserPreferences {
  id             String   @id @default(uuid())
  userId         String   @unique
  favoriteTeams  Json     @default("[]") // Array of team slugs
  defaultTeamId  String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relationships
  user        User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  defaultTeam Team? @relation(fields: [defaultTeamId], references: [id], onDelete: SetNull)
}

// Upvote tracking for questions
model Upvote {
  id         String   @id @default(uuid())
  questionId String
  userId     String?  // null for anonymous users (if we support them later)
  createdAt  DateTime @default(now())
  
  // Relationships
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@unique([questionId, userId]) // Prevent duplicate upvotes per user per question
  @@index([questionId]) // Index for faster queries
}
