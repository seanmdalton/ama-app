openapi: 3.0.3
info:
  title: AMA API
  description: Ask Me Anything API - Submit questions, upvote, and respond to questions
  version: 0.1.0
  contact:
    name: AMA App
servers:
  - url: http://localhost:3000
    description: Local development server

tags:
  - name: Health
    description: Health check endpoints
  - name: Questions
    description: Question management endpoints
  - name: Admin
    description: Protected admin endpoints

components:
  securitySchemes:
    AdminKey:
      type: apiKey
      in: header
      name: x-admin-key
      description: Admin authentication key

  schemas:
    Question:
      type: object
      required:
        - id
        - body
        - upvotes
        - status
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique question identifier
        body:
          type: string
          minLength: 3
          maxLength: 2000
          description: Question text
        upvotes:
          type: integer
          minimum: 0
          description: Number of upvotes
        status:
          type: string
          enum: [OPEN, ANSWERED]
          description: Question status
        responseText:
          type: string
          nullable: true
          description: Admin response (null if not answered)
        respondedAt:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when question was answered
        createdAt:
          type: string
          format: date-time
          description: Question creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    CreateQuestionRequest:
      type: object
      required:
        - body
      properties:
        body:
          type: string
          minLength: 3
          maxLength: 2000
          description: Question text
      example:
        body: "What inspired you to build this project?"

    RespondRequest:
      type: object
      required:
        - response
      properties:
        response:
          type: string
          minLength: 1
          maxLength: 10000
          description: Admin response text
      example:
        response: "I wanted to create a simple platform for community engagement."

    HealthResponse:
      type: object
      required:
        - ok
        - service
      properties:
        ok:
          type: boolean
          description: Health status
        service:
          type: string
          description: Service name
      example:
        ok: true
        service: "ama-api"

    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Error message
        message:
          type: string
          description: Additional error details
      example:
        error: "Validation failed"

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check if the API is running
      operationId: getHealth
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /questions:
    get:
      tags:
        - Questions
      summary: List questions
      description: Get a list of questions filtered by status
      operationId: getQuestions
      parameters:
        - name: status
          in: query
          description: Filter by question status
          required: false
          schema:
            type: string
            enum: [open, answered]
            default: open
      responses:
        '200':
          description: List of questions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'

    post:
      tags:
        - Questions
      summary: Submit a question
      description: Create a new anonymous question (rate limited to 10 per minute per IP)
      operationId: createQuestion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQuestionRequest'
      responses:
        '201':
          description: Question created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Too many requests"
                message: "Rate limit exceeded. Maximum 10 requests per minute."

  /questions/{id}/upvote:
    post:
      tags:
        - Questions
      summary: Upvote a question
      description: Increment the upvote count for a question (rate limited to 10 per minute per IP)
      operationId: upvoteQuestion
      parameters:
        - name: id
          in: path
          required: true
          description: Question ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Question upvoted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '404':
          description: Question not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Not found"
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /questions/{id}/respond:
    post:
      tags:
        - Admin
      summary: Respond to a question
      description: Admin endpoint to respond to an open question and mark it as answered
      operationId: respondToQuestion
      security:
        - AdminKey: []
      parameters:
        - name: id
          in: path
          required: true
          description: Question ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RespondRequest'
      responses:
        '200':
          description: Question answered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - Invalid or missing admin key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Unauthorized: Invalid or missing admin key"
        '404':
          description: Question not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

